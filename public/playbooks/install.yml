---
- name: install data fabric
  hosts: target
  gather_facts: true
  vars:
    mapr_repo: "https://package.mapr.hpe.com/releases"
    cluster_name: "demo.df.io"
    admin_password: "mapr"

  tasks:
    - name: set uid for /sbin/unix_chkpwd
      file:
        path: /sbin/unix_chkpwd
        mode: "u+s"
      become: true
      when: ansible_facts['os_family'] == 'Debian'

    # - name: update packages
    #   apt:
    #     name: "*"
    #     state: latest
    #     update_cache: true
    #   become: true
    #   when: ansible_facts['os_family'] == 'Debian'

    # - name: Check if reboot required
    #   stat:
    #     path: /var/run/reboot-required
    #   register: reboot_required_file
    #   when: ansible_facts['os_family'] == 'Debian'

    # - name: Reboot if required
    #   reboot:
    #   when: ansible_facts['os_family'] == 'Debian' and reboot_required_file.stat.exists == true
    #   become: true

    - name: get mapr installer
      get_url:
        url: "{{ mapr_repo}}/installer/mapr-setup.sh"
        dest: /tmp/mapr-setup.sh
        mode: "0755"

    - stat: path=/opt/mapr/installer/bin/mapr-installer-cli
      register: installer

    - name: setup mapr installer
      command: /tmp/mapr-setup.sh -y -r "{{ mapr_repo }}"
      become: true
      when: not installer.stat.exists

    - name: get available disks
      shell: |
        export DISKS=$(fdisk -l | grep 'Disk /dev/' | grep -v loop | cut -d' ' -f2 | tr -d :)
        export PARTS=$(fdisk -l | grep -e '^/dev/[a-z0-9]' | cut -d' ' -f1)
        for d in ${DISKS}; do if [[ "${PARTS}" != "$d"* ]] ; then echo $d; fi; done
      register: mapr_disks
      args:
        executable: /bin/bash
      become: true

    - name: copy ssh key file
      copy:
        src: "{{ inventory_dir }}/temp.pem"
        dest: "{{ ansible_user_dir }}/key.pem"
        mode: "0600"

    - set_fact:
        stanza_file: |
          environment:
            mapr_core_version: 7.0.0
          config:
            hosts:
              {{ groups['target'] | map ('extract', hostvars, 'ansible_fqdn') | to_nice_yaml | indent(4) }}
            ssh_id: {{ ansible_user_id }}
            ssh_key_file: {{ ansible_user_dir }}/key.pem
            cluster_name: {{ cluster_name }}
            cluster_admin_id: mapr
            cluster_admin_password: {{ admin_password }}
            db_admin_user: root
            db_admin_password: {{ admin_password }}
            log_admin_password: {{ admin_password }}
            metrics_ui_admin_password: {{ admin_password }}
            enable_encryption_at_rest: true
            license_type: M7
            mep_version: 8.1.0
            disks:
              {{ mapr_disks.stdout_lines | to_nice_yaml | indent(4) }}
            disk_format: true
            disk_stripe: 1
            services:
              template-05-converged:
              mapr-hivemetastore:
                database:
                  create: true
                  name: hive
                  user: hive
                  password: {{ admin_password }}
              mapr-grafana:
                enabled: true
              mapr-opentsdb:
                enabled: true
              mapr-collectd:
              mapr-fluentd:
              mapr-kibana:
                enabled: True
              mapr-elasticsearch:
                enabled: True
              mapr-data-access-gateway:
              mapr-mastgateway:

    - name: stanza
      copy:
        dest: /tmp/mapr.stanza
        content: "{{ stanza_file }}"

    - name: wait for instal - this will take a while
      shell: "sleep 30; echo y | sudo /opt/mapr/installer/bin/mapr-installer-cli install -nv -t /tmp/mapr.stanza"
      register: install_run
      failed_when:
        - install_run.rc != 0
        - "'Install is not required' not in install_run.stderr"

    - debug: var=install_run

    # - name: copy the license
    #   copy: src="../../LatestDemoLicense-M7.txt" dest="/tmp/LatestDemoLicense-M7.txt" mode="0644"
    #   ignore_errors: true

    - name: wait for DF services to come up
      wait_for:
        timeout: 300
      delegate_to: localhost

    - name: create ticket for user
      shell: "[ -f /tmp/maprticket_${UID} ] || (echo {{ admin_password }} | maprlogin password -user mapr)"

    - name: create ticket for root
      shell: "[ -f /tmp/maprticket_0 ] || (echo {{ admin_password }} | sudo maprlogin password -user mapr)"

    # - name: install mapr license
    #   shell: |
    #     [ -f /tmp/LatestDemoLicense-M7.txt ] && maprcli license add -license /tmp/LatestDemoLicense-M7.txt -is_file true
    #   ignore_errors: true
    #   register: licensed
    #   failed_when:
    #     - licensed.rc != 0
    #     - "'license exists' not in licensed.stdout"
