---
- name: install data fabric
  hosts: target
  gather_facts: true
  vars:
    mapr_repo: "https://package.mapr.hpe.com/releases"
    mapr_disk_size: "10 GiB"
    cluster_name: "demo.datafabric.io"
    admin_password: "mapr"

  tasks:
    - name: clean up /etc/hosts
      lineinfile:
        path: /etc/hosts
        regexp: "ip6-|IPv6|::1|127.0.1.1"
        # regexp: '127.0.1.1'
        state: absent
      become: true
      when: ansible_facts['os_family'] == 'Debian'

    - name: set umask for installer
      lineinfile:
        path: /etc/login.defs
        regexp: "^UMASK"
        line: UMASK      0022
      become: true
      when: ansible_facts['os_family'] == 'Debian'

    - name: Ensure the locale exists
      locale_gen:
        name: en_US.UTF-8
        state: present
      become: true
      when: ansible_facts['os_family'] == 'Debian'

    - name: set default locale to en_US
      shell: sudo localectl set-locale LANG=en_US.utf8
      become: true
      when: ansible_facts['os_family'] == 'Debian'

    - name: update packages
      apt:
        name: "*"
        state: latest
        update_cache: true
      become: true
      when: ansible_facts['os_family'] == 'Debian'

    - name: Install prerequisites
      package: name="dnsutils, iputils-arping, netcat, nfs-common, ntp, ntpdate, sdparm, syslinux, sysstat, wamerican, rpcbind, gnupg2, python, syslinux-utils" state=present
      become: true
      when: ansible_facts['os_family'] == 'Debian'

    - name: get mapr installer
      get_url:
        url: "{{ mapr_repo}}/installer/mapr-setup.sh"
        dest: /tmp/mapr-setup.sh
        mode: "0755"

    - stat: path=/opt/mapr/installer/bin/mapr-installer-cli
      register: installer

    - name: setup mapr installer
      command: /tmp/mapr-setup.sh -y -r "{{ mapr_repo }}"
      become: true
      when: not installer.stat.exists

    - shell: "fdisk -l | grep {{ mapr_disk_size }} | cut -d' ' -f2 | tr -d ':'"
      register: mapr_disks
      become: true

    - name: get node name
      set_fact:
        mapr_hosts: "{{ groups['target'] | map ('extract', hostvars, 'ansible_fqdn') }}"

    - name: copy ssh key file
      copy:
        src: "{{ inventory_dir }}/temp.pem"
        dest: "{{ ansible_user_dir }}/temp_pem"
        mode: "0600"

    - set_fact:
        stanza_file: |
          environment:
            mapr_core_version: 7.0.0
          config:
            admin_id: mapr
            cluster_name: "{{ cluster_name }}"
            db_admin_password_set: true
            db_admin_password: {{ admin_password }}
            db_admin_user: root
            debug_set: false
            elasticsearch_path: /opt/mapr/es_db
            enable_encryption_at_rest: true
            enable_min_metrics_collection: true
            enable_nfs: true
            hosts:
              {{ mapr_hosts | to_nice_yaml | indent(4) }}
            license_type: M7
            log_admin_password: {{ admin_password }}
            mep_version: 8.1.0
            metrics_ui_admin_password: {{ admin_password }}
            nfs_type: "NFSv4"
            security: true
            ssh_id: {{ ansible_user_id }}
            ssh_key_file: "{{ ansible_user_dir }}/temp.pem"
            disks:
              {{ mapr_disks.stdout_lines | to_nice_yaml | indent(4) }}
            disk_format: true
            disk_stripe: 1
            services:
              template-05-converged:
              mapr-hivemetastore:
                database:
                  create: true
                  name: hive
                  user: hive
                  password: {{ admin_password }}
              mapr-hue-livy:
                    enabled: true
              mapr-grafana:
                enabled: true
              mapr-opentsdb:
                enabled: true
              mapr-collectd:
              mapr-fluentd:
              mapr-kibana:
                enabled: true
              mapr-elasticsearch:
                enabled: true
              mapr-data-access-gateway:
              mapr-mastgateway:

    - name: stanza
      copy:
        dest: /tmp/mapr.stanza
        content: "{{ stanza_file }}"
      register: stanza

    - name: wait for services and install from stanza
      shell: "sleep 30; echo y | sudo /opt/mapr/installer/bin/mapr-installer-cli install -nv -t /tmp/mapr.stanza"
      # when: stanza.changed
      register: first_install
      failed_when:
        - first_install.rc != 0
        - "'Install is not required' not in first_install.stderr"

    - name: copy the license
      copy: src="../../LatestDemoLicense-M7.txt" dest="/tmp/LatestDemoLicense-M7.txt" mode="0644"
      ignore_errors: true

    - name: wait for DF services to come up
      wait_for:
        timeout: 300
      delegate_to: localhost

    - name: create ticket for user
      shell: "[ -f /tmp/maprticket_1000 ] || (echo mapr | maprlogin password -user mapr)"

    - name: create ticket for root
      shell: "[ -f /tmp/maprticket_0 ] || (echo mapr | sudo maprlogin password -user mapr)"

    - name: install mapr license
      shell: |
        [ -f /tmp/LatestDemoLicense-M7.txt ] && maprcli license add -license /tmp/LatestDemoLicense-M7.txt -is_file true
      ignore_errors: true
      register: licensed
      failed_when:
        - licensed.rc != 0
        - "'license exists' not in licensed.stdout"
